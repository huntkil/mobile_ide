# Mobile IDE Development Rules

## Code Style and Naming Conventions

### General Rules
- Use descriptive, self-documenting variable and function names
- Follow consistent indentation (2 spaces for shell scripts, 4 for other languages)
- Add comprehensive comments for complex logic
- Use meaningful commit messages following conventional commit format

### File Naming
- Scripts: `descriptive_name_v{version}.sh` (e.g., `complete_fresh_start.sh`)
- Documentation: `UPPERCASE_DESCRIPTION.md` (e.g., `ERROR_RESOLUTION_HISTORY.md`)
- Configuration: `config_*.json` or `*.conf`

## Directory Structure

```
mobile_ide/
├── scripts/           # All shell scripts
├── docs/             # Documentation
├── config/           # Configuration files
├── tests/            # Test files
└── .cursor/rules/    # Development rules
```

## Implementation Standards

### Storage Management
- Always check available storage before operations
- Implement cleanup procedures for temporary files
- Use external storage when internal storage is insufficient
- Monitor storage usage during large operations

### VNC and Display Management
- **CRITICAL**: Always use AppImage extraction instead of direct mounting
- **CRITICAL**: Use native execution instead of proot environment for Cursor AI
- Implement proper VNC server configuration with window managers
- Set appropriate display resolution and color depth
- Handle VNC password management securely

### Network Resilience
- Implement multiple DNS server fallbacks
- Use environment variables for DNS configuration instead of system files
- Test network connectivity before download operations
- Provide local file alternatives for network-dependent operations

### Error Handling and Recovery
- **CRITICAL**: Never use `set -e` in scripts - it causes premature termination
- Implement comprehensive error handling with `|| log_warning` and `|| log_error`
- Use `safe_run` function for critical operations
- Add permission checks before system operations
- Implement graceful degradation for non-critical failures

### Process Management
- **CRITICAL**: Use `ps aux | grep | awk | xargs kill -9` instead of `pkill`
- Implement proper process cleanup before starting new services
- Monitor process status and provide detailed logging
- Handle zombie processes and resource cleanup

## Mobile Optimizations

### Performance
- Optimize memory usage (max-old-space-size=512 for Cursor AI)
- Implement caching strategies for expensive operations
- Use background processes for long-running tasks
- Monitor and log performance metrics

### Battery and Resource Management
- Minimize CPU-intensive operations
- Implement efficient file I/O patterns
- Use appropriate compression for large files
- Monitor battery usage and thermal management

## Documentation Standards

### Code Documentation
- Document all configuration options and environment requirements
- Provide usage examples and integration instructions
- Include troubleshooting guides for common issues
- Maintain changelogs for all significant changes

### Error Documentation
- **CRITICAL**: Document all encountered errors and their solutions
- Categorize errors by type (environment, network, permission, etc.)
- Provide step-by-step resolution procedures
- Include prevention strategies for common issues

## Quality Assurance

### Testing
- Test all scripts in both Termux and WSL environments
- Verify network connectivity and DNS resolution
- Test VNC server functionality and display rendering
- Validate Cursor AI execution and GUI display

### Validation
- Implement comprehensive error checking
- Verify file permissions and access rights
- Test process management and cleanup procedures
- Validate configuration file syntax and settings

## Security Considerations

### File Permissions
- Set appropriate permissions for sensitive files (600 for VNC passwords)
- Implement secure password management
- Protect configuration files from unauthorized access
- Use secure file transfer methods

### Network Security
- Implement secure VNC connections
- Use appropriate authentication methods
- Protect against unauthorized access
- Implement proper firewall rules

## Development Workflow

### Version Control
- Use meaningful commit messages with conventional format
- Implement feature branches for significant changes
- Maintain clean git history with logical progression
- Document all major changes and their rationale

### Deployment
- Test all changes in development environment first
- Implement rollback procedures for failed deployments
- Monitor deployment success and failure rates
- Provide clear deployment instructions

## Critical Lessons Learned

### Environment-Specific Issues
1. **Termux vs WSL**: Always distinguish between environments
2. **FUSE Problems**: Use AppImage extraction instead of mounting
3. **proot Limitations**: Use native execution for GUI applications
4. **Permission Issues**: Always check permissions before system operations

### Script Stability
1. **Avoid `set -e`**: It causes premature script termination
2. **Process Management**: Use robust process termination methods
3. **Error Handling**: Implement comprehensive error recovery
4. **Logging**: Provide detailed logging for debugging

### Network and Download Issues
1. **DNS Problems**: Use multiple DNS servers and environment variables
2. **Download Failures**: Provide local file alternatives
3. **Network Testing**: Always test connectivity before operations
4. **Fallback Strategies**: Implement multiple resolution methods

### GUI and Display Issues
1. **VNC Configuration**: Proper window manager setup is essential
2. **X11 Environment**: Complete environment variable setup required
3. **Display Resolution**: Appropriate resolution and color depth settings
4. **Process Persistence**: Ensure GUI applications remain running

## Best Practices Summary

### For New Scripts
1. Start with error handling framework
2. Implement permission checks
3. Use robust process management
4. Provide comprehensive logging
5. Test in multiple environments

### For Problem Resolution
1. Identify error category (environment, network, permission, etc.)
2. Check error resolution history
3. Implement proven solutions
4. Document new solutions
5. Update rules and documentation

### For Maintenance
1. Regular testing of all scripts
2. Update documentation with new findings
3. Monitor for new error patterns
4. Implement preventive measures
5. Maintain clean and organized codebase

## Emergency Procedures

### Critical Failures
1. **Script Termination**: Check for `set -e` and remove it
2. **Process Hanging**: Use robust termination methods
3. **Permission Denied**: Implement permission checks
4. **Network Issues**: Use fallback DNS and local files

### Recovery Steps
1. **Complete Fresh Start**: Use `complete_fresh_start.sh`
2. **AppImage Extraction**: Always extract instead of mounting
3. **Native Execution**: Use native execution for GUI apps
4. **Environment Reset**: Clear and reconfigure environment

## Future Considerations

### Scalability
- Design for multiple device types
- Implement modular architecture
- Consider performance optimization
- Plan for feature expansion

### Maintenance
- Regular dependency updates
- Security patch management
- Performance monitoring
- User feedback integration

### Documentation
- Keep error resolution history updated
- Maintain comprehensive troubleshooting guides
- Update best practices regularly
- Document new findings and solutions